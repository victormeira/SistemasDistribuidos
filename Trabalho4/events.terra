#include "/home/terra/TerraNG/terra/TerraNet.defs"

var ushort myNodeId = getNodeId();

pktype ackMsg from radioMsg with
    var ushort nodeId;
end

// building my ackMessage with myNodeId
var ackMsg myAckMsg;
myAckMsg.nodeId = myNodeId;
myAckMsg.target = BROADCAST;
myAckMsg.source = myNodeId;

// building my neighborAck and array of neighborIds
var ackMsg neighborAckMsg;
var ushort[8] neighborIdArray;

var ushort count = -1;

emit LED0(OFF);
emit LED1(OFF);
emit LED2(OFF);

// keep sending and receiving for 10 sec
// for send LED0 with turn on, for each receive LED2 will toggle
par/or do

    // send once and keep receiving
    par/and do
        // send ackMessages to neighbor
        var ushort randWait = random()%2000;
        await (randWait)ms;

        emit LED0(TOGGLE);
        emit SEND(myAckMsg);

        await SEND_DONE;
    with
        loop do

            // await neighbor message
            neighborAckMsg = await RECEIVE;

            // Add to array of neighbors
            count = count + 1;
            neighborIdArray[count] = neighborAckMsg.nodeId;

            emit LED2(TOGGLE);
        end
    end

with
    await 7s;

end

/*
emit LED0(OFF);
emit LED1(OFF);
emit LED2(OFF);

// show neighbor count in LEDs
if count % 1 == 0 then
    emit LED2(ON);
end
if count - 4 > 1 or (count < 4 and count > 1) then
    emit LED1(ON);
end
if count > 3 then
    emit LED0(ON);
end */

await 5s;

emit LED0(OFF);
emit LED1(OFF);
emit LED2(OFF);


// Rumour routing variable initializing

regtype eventData with
    var ushort[3] nodeId;
    var ushort[3] numberOfHops;
    var ushort[3] eventId;
    var ushort[3] messageType;
end

var eventData agentArray;
var eventData queryArray;
var ushort agentCount = 0;
var ushort queryCount = 0;

pktype eventMsg from radioMsg with
    var ushort numberOfHops;
    var ushort eventId;
    var ushort nodeId;
    var ushort messageType; // 0 for agent, 1 for query, 2 for response
    var ushort numberOfPassages; //records the number of passages so we can limit
end

var eventMsg receivedMsg;
var eventMsg mySentMsg;

// Rumour routing main loop


// Hardcoding sending EVENT
if myNodeId == 23 then

    await 5s;

    // Send agent to random neighbor
    mySentMsg.messageType = 0;
    mySentMsg.nodeId = myNodeId;
    mySentMsg.eventId = 1;
    mySentMsg.numberOfHops = 0;
    mySentMsg.target = neighborIdArray[random() % count];
    mySentMsg.numberOfPassages = 0;

    agentArray.nodeId[0] = 23;
    agentArray.eventId[0] = 1;
    agentArray.numberOfHops[0] = 0;
    agentArray.messageType[0] = 0;

    agentCount = 1;

    emit SEND(mySentMsg);

    await SEND_DONE;
    emit LED2(OFF);

end

// Hardcoding sending QUERY
if myNodeId == 41 then

    await 2s;

    // Send query to random neighbor
    mySentMsg.messageType = 1;
    mySentMsg.nodeId = myNodeId;
    mySentMsg.eventId = 1;
    mySentMsg.numberOfHops = 0;
    mySentMsg.target = neighborIdArray[random() % count];
    mySentMsg.numberOfPassages = 0;

    queryArray.nodeId[0] = 41;
    queryArray.eventId[0] = 1;
    queryArray.numberOfHops[0] = 0;
    queryArray.messageType[0] = 1;

    queryCount = 1;

    emit SEND(mySentMsg);

    await SEND_DONE;
    emit LED2(ON);

end


par do
    loop do
        // wait for a message
        receivedMsg = await RECEIVE;

        // AGENT message received
        if receivedMsg.messageType == 0 and receivedMsg.numberOfPassages < 20 then

            emit LED0(ON);

            var ushort bestNumberOfHops = receivedMsg.numberOfHops + 1;
            var ushort nextNodeId = -1;

            var byte found = 0;

            // Update eventData array
            if agentCount > 0 then
                // check if we already have this event
                loop i, agentCount do
                    if agentArray.eventId[i] == receivedMsg.eventId then

                        // update number of hops and where to go if new numberOfHops is lower
                        if(agentArray.numberOfHops[i] - 1 > receivedMsg.numberOfHops) then
                            agentArray.numberOfHops[i] = receivedMsg.numberOfHops + 1;
                            agentArray.nodeId[i] = receivedMsg.nodeId;
                            bestNumberOfHops = agentArray.numberOfHops[i];
                        end

                        found = 1;
                        break;
                    end
                end
            end

            if found == 0 then
                agentArray.nodeId[agentCount] = receivedMsg.nodeId;
                agentArray.eventId[agentCount] = receivedMsg.eventId;
                agentArray.numberOfHops[agentCount] = receivedMsg.numberOfHops;
                agentCount = agentCount + 1;
            end

            found = 0;
            /*
            if queryCount > 0 then
                loop j, queryCount do
                    if queryArray.eventId[j] == receivedMsg.eventId then
                        nextNodeId = queryArray.nodeId[j];
                        found = 1;

                        mySentMsg.messageType = 0;
                        mySentMsg.nodeId = myNodeId;
                        mySentMsg.eventId = receivedMsg.eventId;
                        mySentMsg.numberOfHops = bestNumberOfHops;
                        mySentMsg.target = neighborIdArray[nextNodeId];
                        mySentMsg.numberOfPassages = receivedMsg.numberOfPassages + 1;

                        emit LED0(ON);
                        emit LED1(ON);
                        emit LED2(ON);
                        emit SEND(mySentMsg);
                        emit LED0(OFF);
                        emit LED1(OFF);
                        emit LED2(OFF);

                        break;
                    end
                end
            end */

            // If we dont have that event
            if found == 0 then
                queryArray.nodeId[queryCount] = receivedMsg.nodeId;
                queryArray.eventId[queryCount] = receivedMsg.eventId;
                queryArray.numberOfHops[queryCount] = receivedMsg.numberOfHops;
                queryCount = queryCount + 1;

                // Send agent to random neighbor
                mySentMsg.messageType = 0;
                mySentMsg.nodeId = myNodeId;
                mySentMsg.eventId = receivedMsg.eventId;
                mySentMsg.numberOfHops = bestNumberOfHops;
                mySentMsg.target = neighborIdArray[random() % count];
                mySentMsg.numberOfPassages = receivedMsg.numberOfPassages + 1;

            end

            var ushort randWait = random()%2000 + 2000;
            await (randWait)ms;

            emit SEND(mySentMsg);

            await SEND_DONE;

        end
    end
with
    loop do
        receivedMsg = await RECEIVE;
        // QUERY message received
        if receivedMsg.messageType == 1 and receivedMsg.numberOfPassages < 20 then

            emit LED1(ON);

            var ushort nextNodeId = -1;
            var ushort bestNumberOfHops = receivedMsg.numberOfHops + 1;

            var byte beginReply = 0;


            //check for queried event
            if agentCount > 0 then
                loop i, agentCount do
                    if agentArray.eventId[i] == receivedMsg.eventId then

                        emit LED2(ON);
                        await 10s;
                        emit LED2(OFF);

                        // if I began the agent
                        if agentArray.nodeId[i] == myNodeId then
                            emit LED0(ON);
                            emit LED1(ON);
                            emit LED2(ON);

                            beginReply = 1;
                            break;
                        end

                        nextNodeId = agentArray.nodeId[i];
                        break;
                    end
                end
            end

            var byte found = 0;

            //update query array
            if queryCount > 0 then
                // check if we already have this query
                loop j, queryCount do
                    if queryArray.eventId[j] == receivedMsg.eventId then

                        emit LED2(ON);
                        await 2s;
                        emit LED2(OFF);

                        // update number of hops and where to go if new numberOfHops is lower
                        if(queryArray.numberOfHops[j] - 1 > receivedMsg.numberOfHops) then
                            queryArray.numberOfHops[j] = receivedMsg.numberOfHops + 1;
                            queryArray.nodeId[j] = receivedMsg.nodeId;
                            bestNumberOfHops = queryArray.numberOfHops[j];
                        end

                        found = 1;

                        break;
                    end
                end
            end

            if found == 0 then
                queryArray.nodeId[queryCount] = receivedMsg.nodeId;
                queryArray.eventId[queryCount] = receivedMsg.eventId;
                queryArray.numberOfHops[queryCount] = receivedMsg.numberOfHops;
                queryCount = queryCount + 1;
                emit LED2(ON);
                emit LED1(ON);
                await 2s;
                emit LED2(OFF);
                emit LED1(OFF);

            end

            // START THE REPLY CHAIN

            // Send query to other node
            mySentMsg.messageType = 1;
            mySentMsg.nodeId = myNodeId;
            mySentMsg.eventId = receivedMsg.eventId;
            mySentMsg.numberOfHops = bestNumberOfHops;


            // send to a random if not found event, or send to closest node with event
            if nextNodeId < 0 then
                emit LED0(ON);
                mySentMsg.target = neighborIdArray[random() % count];
            else
                mySentMsg.target = nextNodeId;
            end

            //mySentMsg.target = neighborIdArray[1];

            mySentMsg.numberOfPassages = receivedMsg.numberOfPassages + 1;

            var ushort randWait = random()%2000 + 2000;
            await (randWait)ms;

            emit SEND(mySentMsg);
            await SEND_DONE;

        // RESPONSE message received
        //else/if receivedMsg.messageType == 2 then


        end
    end
end
